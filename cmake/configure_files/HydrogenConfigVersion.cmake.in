# This verifies that the Hydrogen version falls within a compatible
# version range. Unfortunately, the versioning system is not entirely
# setup to do this implicitly. Consider this the explicit
# documentation. Compatible ranges are:
#
# [0.0.0 0.87)
# [0.87 1.0.0)
# [1.0.0 1.1.0)
# [1.1.0 1.2.0)
# [1.2.0 ???)
#
# IMPORTANT: IF YOU MAKE A BREAKING CHANGE TO HYDROGEN, THE UPDATE
# MUST BE GIVEN A NEW VERSION NUMBER, WHICH THEN MUST BE APPENDED TO
# THIS LIST.

set(_version_compat_ranges 0.0.0 0.87.0 1.0.0 1.1.0 1.2.0)

# This is the version that has been installed.
set(PACKAGE_VERSION "@HYDROGEN_VERSION@")

# The version we need to match is PACKAGE_FIND_VERSION. The condition is that
#
# is_in_version_range(PACKAGE_FIND_VERSION, get_version_range(${PACKAGE_VERSION}))
#
# i.e., TARGET_VERSION_RANGE.lower <= PACKAGE_FIND_VERSION < TARGET_VERSION_RANGE.upper

if(PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION)
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
else()

  # This bit gets the compatibility bucket for PACKAGE_FIND_VERSION
  list(LENGTH _version_compat_ranges _num_versions)

  list(GET _version_compat_ranges 0 _minimum_version)
  if (PACKAGE_FIND_VERSION VERSION_LESS _minimum_version)
    message(FATAL_ERROR
      "Could not find version range for Hydrogen version ${PACKAGE_FIND_VERSION}.")
  endif ()

  # Indices are 0-based and RANGE is inclusive
  math(EXPR _num_versions "${_num_versions} - 1")
  foreach (_lower_ind RANGE 0 ${_num_versions})

    math(EXPR _upper_ind "${_lower_ind} + 1")

    # This is always the case
    list(GET _version_compat_ranges ${_lower_ind} _lower_version)

    if (_lower_ind EQUAL _num_versions)
      set(_upper_version "INF") # Low probability of spelling error...
    else ()
      list(GET _version_compat_ranges ${_upper_ind} _upper_version)

      # Ranges are half-open: [lower upper)
      if ((PACKAGE_VERSION VERSION_GREATER_EQUAL _lower_version) AND
          (PACKAGE_VERSION VERSION_LESS _upper_version))
        break ()
      endif ()
    endif ()
  endforeach ()

  if ((PACKAGE_FIND_VERSION VERSION_GREATER_EQUAL _lower_version) AND
      ((PACKAGE_FIND_VERSION VERSION_LESS _upper_version) OR
        (_upper_version STREQUAL "INF")))
    set(PACKAGE_VERSION_COMPATIBLE TRUE)
  else ()
    set(PACKAGE_VERSION_COMPATIBLE FALSE)
  endif ()

  if(PACKAGE_FIND_VERSION STREQUAL PACKAGE_VERSION)
      set(PACKAGE_VERSION_EXACT TRUE)
  endif()
endif()

# if the installed or the using project don't have CMAKE_SIZEOF_VOID_P set, ignore it:
if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "" OR "@CMAKE_SIZEOF_VOID_P@" STREQUAL "")
   return()
endif()

# check that the installed version has the same 32/64bit-ness as the one which is currently searching:
if(NOT CMAKE_SIZEOF_VOID_P STREQUAL "@CMAKE_SIZEOF_VOID_P@")
  math(EXPR installedBits "@CMAKE_SIZEOF_VOID_P@ * 8")
  set(PACKAGE_VERSION "${PACKAGE_VERSION} (${installedBits}bit)")
  set(PACKAGE_VERSION_UNSUITABLE TRUE)
endif()
